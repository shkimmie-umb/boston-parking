{"version":3,"sources":["images/grocery.svg","images/green.svg","images/soup.svg","images/grab.svg","images/foodpantry.svg","images/parkingmeter.svg","Checkbox.js","NavBar.js","PopCard.js","ParkingPopCard.js","MapControls.js","MarkerCard.js","ParkingMarkerCard.js","InfoWindow.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","CheckboxMenu","props","register","handleSubmit","onSubmit","_useState","useState","revealFilter","_useState2","Object","slicedToArray","state","setState","changeArrowState","react_default","a","createElement","className","onClick","fa_index_esm","style","display","type","name","ref","src","greenIcon","alt","groceryIcon","grabIcon","foodPantryIcon","soupIcon","NavBar","href","target","rel","bs_index_esm","free","$","$$","$$$","status","Greenmarket","Grocery","GrabAndGo","FoodPantry","SoupKitchen","closeInfoBar","size","opacity","PopCard","getCord","selectedFood","setSelectedFood","esm","latitude","location","longitude","closeOnClick","onClose","description","concat","map","address","cost","ParkingPopCard","selectedSpot","setSelectedSpot","LATITUDE","LONGITUDE","STREET","COUNTS","BASE_RATE","MapControls","setViewport","mapRef","float","margin","padding","positionOptions","enableHighAccuracy","trackUserLocation","zoom","MarkerCard","food","JSON","parse","e","preventDefault","icon","getIcon","ParkingMarkerCard","spot","meterIcon","TYPE","InfoWindow","revealInfo","arrow","setArrow","App","viewport","useRef","handleViewportChange","useCallback","newViewport","handleGeocoderViewportChange","objectSpread","transitionDuration","_useState3","_useState4","_useForm","useForm","defaultValues","_useState5","_useState6","_useState7","_useState8","useEffect","listner","key","window","addEventListener","removeEventListener","str","height","assign","width","onViewportChange","mapStyle","mapboxApiAccessToken","foodData","index","parkingData","data","index_m","position","hideOnSelect","queryParams","country","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.99527eca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grocery.653d7e92.svg\";","module.exports = __webpack_public_path__ + \"static/media/green.3770045a.svg\";","module.exports = __webpack_public_path__ + \"static/media/soup.cf962d04.svg\";","module.exports = __webpack_public_path__ + \"static/media/grab.f8ab4e03.svg\";","module.exports = __webpack_public_path__ + \"static/media/foodpantry.99f1dd75.svg\";","module.exports = __webpack_public_path__ + \"static/media/parkingmeter.240151f9.svg\";","import React, {useState} from \"react\";\nimport groceryIcon from './images/grocery.svg'\nimport greenIcon from './images/green.svg'\nimport soupIcon from './images/soup.svg'\nimport grabIcon from './images/grab.svg'\nimport foodPantryIcon from './images/foodpantry.svg'\nimport { FaAngleDoubleDown,  FaAngleDoubleUp} from 'react-icons/fa'\n\nexport default function CheckboxMenu(props) {\n\n    const {register, handleSubmit, onSubmit} = props\n\n    const [state, setState] = useState({\n        revealFilter: true\n    })\n\n    const UpAndDown = () => {\n        if(state.revealFilter) return 'block'\n        else return 'none'\n    }\n\n    const changeArrowState = () =>{\n        setState({\n            revealFilter: !state.revealFilter\n        })\n    }\n\n  return (\n    <div className = \"checkbox\">\n        <div className = \"checkbox-navbar-container\" onClick = {changeArrowState}>\n            <div className=\"checkbox-navbar\">\n                <h4>Filter</h4>\n                <div onClick = {changeArrowState}>\n                    {state.revealFilter ? <FaAngleDoubleUp/> : <FaAngleDoubleDown/>}\n                </div>\n            </div>\n        </div>\n\n        <div className = 'checkbox-input-container' style = {{display : UpAndDown()}}>\n        <form onSubmit={handleSubmit(onSubmit)} className ='checkbox-form'>\n            <div className = 'check'>\n                <input type = 'checkbox' name ='free' ref={register}/>\n                <label className = 'menu'> Free</label >\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='$' ref={register}/>\n                <label className = 'menu'> $ (Inexpensive)</label>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='$$' ref={register}/>\n                <label className = 'menu'> $$ (Moderate) </label>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='$$$' ref={register}/>\n                <label className = 'menu'> $$$ (Expensive) </label>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='status' ref={register}/>  \n                <label className = 'menu'> In Business</label>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='Greenmarket' ref={register}/>\n                <label className = 'menu'> Greenmarket </label>\n                <img src = {greenIcon} alt =\"Food Icon\"/>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='Grocery' ref={register}/>\n                <label className = 'menu'>Grocery Store </label>\n                <img src = {groceryIcon} alt =\"Food Icon\"/>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name = 'GrabAndGo' ref={register}/>\n                <label className = 'menu'> Grab & Go Meals </label>\n                <img src = {grabIcon} alt =\"Food Icon\"/>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name = 'FoodPantry' ref={register}/>\n                <label className = 'menu'> Food Pantry</label>\n                <img src = {foodPantryIcon} alt =\"Food Icon\"/>\n            </div>\n\n            <div className = 'check'>\n                <input type = 'checkbox' name ='SoupKitchen' ref={register}/>\n                <label className = 'menu'>Soup Kitchen</label>\n                <img src = {soupIcon} alt =\"Food Icon\"/>\n            </div>\n            \n            <div className= 'check-submit'>\n                <button type=\"submit\">Submit</button>\n            </div>\n        </form>\n        \n        </div>\n    </div>\n  );\n}\n","import React from 'react'\nimport { BsFillInfoCircleFill } from \"react-icons/bs\"\n\nexport default function NavBar(props) {\n    const {state, setState} = props\n\n    const changeInfoBarState = () =>{\n        setState({\n            free: state.free,\n            $: state.$,\n            $$: state.$$,\n            $$$: state.$$$,\n            status: state.status,\n            Greenmarket: state.Greenmarket,\n            Grocery: state.Grocery,\n            GrabAndGo: state.GrabAndGo,\n            FoodPantry: state.FoodPantry,\n            SoupKitchen: state.SoupKitchen,\n            closeInfoBar: !state.closeInfoBar\n        })\n    }\n\n    return (\n        <div className=\"navbar\">\n        <h1>Boston Parking</h1>\n        <div className=\"navbar-links\">\n            <a href = 'https://www1.nyc.gov/site/coronavirus/index.page' target=\"_blank\" rel=\"noopener noreferrer\"> COVID-19 Info</a>\n            <a href = 'https://a069-access.nyc.gov/accesshra/' target=\"_blank\" rel=\"noopener noreferrer\"> ACCESS HRA</a>\n            <a href = 'https://www1.nyc.gov/site/helpnownyc/index.page' target=\"_blank\" rel=\"noopener noreferrer\"> Help Now NYC</a>\n        </div>\n\n        <div className = 'info-icon'>\n           <BsFillInfoCircleFill onClick = {changeInfoBarState} size={25} opacity = '0.5'/>\n        </div>\n\n        </div>\n\n    )\n}\n","import React from 'react'\nimport {Popup} from 'react-map-gl'\n\nexport default function PopCard(props){\n    const {getCord, selectedFood, setSelectedFood} = props\n    return(\n        <Popup\n            latitude = {getCord(selectedFood.location)[0]} \n            longitude = {getCord(selectedFood.location)[1]}\n            closeOnClick={false} \n            onClose = {()=> setSelectedFood(null)}\n            >\n            <div className = \"pop-container\">\n            <div className = 'pop-header'>{selectedFood.name}</div>\n              <br></br>\n            <div className = 'pop-description'>{selectedFood.description}</div> \n              <br></br>\n            <div className = 'pop-address'>Location: <br></br> <a href = {`${selectedFood.map}`} target=\"_blank\"rel=\"noopener noreferrer\" >{selectedFood.address}</a></div>\n              <br></br>\n            <div className = 'pop-cost'>Cost: {selectedFood.cost}</div>\n            </div>\n          </Popup>\n    )\n}","import React from 'react'\nimport {Popup} from 'react-map-gl'\n\nexport default function ParkingPopCard(props){\n    const {selectedSpot, setSelectedSpot} = props\n    return(\n        <Popup\n            latitude = {selectedSpot.LATITUDE}\n            longitude = {selectedSpot.LONGITUDE}\n            closeOnClick={true}\n            onClose = {()=> setSelectedSpot(null)}\n            >\n            <div className = \"pop-container\">\n            <div className = 'pop-header'>{selectedSpot.STREET + \" meters\"}</div>\n              <br></br>\n            <div className = 'pop-description'>{selectedSpot.COUNTS + \" meters available\"}</div> \n              <br></br>\n            {/* <div className = 'pop-address'>Location: <br></br> <a href = {`${selectedSpot.map}`} target=\"_blank\"rel=\"noopener noreferrer\" >{selectedFood.address}</a></div>\n              <br></br> */}\n            <div className = 'pop-cost'>Cost: {\"$\"+selectedSpot.BASE_RATE + \" Per 15 mins\"}</div>\n            </div>\n          </Popup>\n    )\n}","import React  from 'react'\nimport {GeolocateControl, NavigationControl} from 'react-map-gl'\n\nexport default function MapControls(props){\n    const {setViewport, mapRef} = props\n\n    const geolocateStyle = {\n        float: 'left',\n        margin: '8px',\n        padding: '8px'\n      };\n\n\n      const resetMap = () => {\n          setViewport({\n            latitude: 40.7128, //40.7127281\n            longitude: -74.0060152, //74.0060\n            zoom: 11\n          })\n      }\n\n    return(\n        <div className = \"controls-container\">\n            <div className = 'zoom-control'>\n                <NavigationControl mapRef = {mapRef}/>\n            </div>\n\n            <div className = \"geolocate-control\">\n                <GeolocateControl\n                style = {geolocateStyle}\n                positionOptions={{ enableHighAccuracy: true }}\n                trackUserLocation={true}\n                ></GeolocateControl>\n                <button className = 'home-bttn' \n                    onClick = {resetMap}>RESET MAP\n                </button>\n            </div>\n\n            \n      </div>\n    )\n}","import React from 'react'\nimport {Marker} from 'react-map-gl'\nimport groceryIcon from './images/grocery.svg'\nimport greenIcon from './images/green.svg'\nimport soupIcon from './images/soup.svg'\nimport grabIcon from './images/grab.svg'\nimport foodPantryIcon from './images/foodpantry.svg'\n\nexport default function MarkerCard(props){\n    const {food, setSelectedFood, getCord, state} = props\n\n    const getIcon = (type) => {\n        let icon;\n        if(type === \"Grocery\") icon = groceryIcon\n        if(type === \"GrabAndGo\") icon = grabIcon\n        if(type === \"Greenmarket\") icon = greenIcon\n        if(type === \"SoupKitchen\") icon = soupIcon\n        if(type === \"FoodPantry\") icon = foodPantryIcon\n        return icon\n    }\n\n    const hideOrShow = (type, cost, status) => {\n        status = JSON.parse(status)\n        if(state.status && !status) return 'none'\n        if(!state[type]) return \"none\"\n        if(cost === 'FREE' && !state.free) return 'none'\n        if(cost === '$' && !state.$) return 'none'\n        if(cost === '$$' && !state.$$) return 'none'\n        if(cost === '$$$' && !state.$$$) return 'none'\n        else return \"block\"\n    }\n    return(\n        <Marker\n            latitude = {getCord(food.location)[0]} \n            longitude = {getCord(food.location)[1]}>\n            <button \n              style = {{display: hideOrShow(food.type, food.cost, food.status)}}\n              className = \"marker-btn\" onClick = {e => {\n                e.preventDefault()\n                setSelectedFood(food)\n              }}>\n              <img src = {getIcon(food.type)} alt =\"Food Icon\"/>\n            </button>\n          </Marker>\n    )\n}","import React from 'react'\nimport {Marker} from 'react-map-gl'\n// import groceryIcon from './images/grocery.svg'\n// import greenIcon from './images/green.svg'\n// import soupIcon from './images/soup.svg'\n// import grabIcon from './images/grab.svg'\n// import foodPantryIcon from './images/foodpantry.svg'\nimport meterIcon from './images/parkingmeter.svg'\n\nexport default function ParkingMarkerCard(props){\n    const {spot, setSelectedSpot, getCord, state} = props\n\n    const getIcon = (type) => {\n        let icon;\n        // if(type === \"Grocery\") icon = groceryIcon\n        // if(type === \"GrabAndGo\") icon = grabIcon\n        // if(type === \"Greenmarket\") icon = greenIcon\n        // if(type === \"SoupKitchen\") icon = soupIcon\n        // if(type === \"FoodPantry\") icon = foodPantryIcon\n        if(type === \"meter\") icon = meterIcon\n        return icon\n    }\n\n    const hideOrShow = (type, cost, status) => {\n        status = JSON.parse(status)\n        if(state.status && !status) return 'none'\n        if(!state[type]) return \"none\"\n        if(cost === 'FREE' && !state.free) return 'none'\n        if(cost === '$' && !state.$) return 'none'\n        if(cost === '$$' && !state.$$) return 'none'\n        if(cost === '$$$' && !state.$$$) return 'none'\n        else return \"block\"\n    }\n    return(\n        <Marker\n            latitude = {spot.LATITUDE} \n            longitude = {spot.LONGITUDE}>\n            <button \n              // style = {{display: hideOrShow(spot.type, spot.cost, spot.status)}}\n              className = \"marker-btn\" onClick = {e => {\n                e.preventDefault()\n                setSelectedSpot(spot)\n              }}>\n              <img src = {getIcon(spot.TYPE)} alt =\"Parking Icon\"/>\n            </button>\n          </Marker>\n    )\n}","import React, {useState} from \"react\";\nimport { FaAngleDoubleDown,  FaAngleDoubleUp, FaWindowClose} from 'react-icons/fa'\n\nexport default function InfoWindow(props) {\n\n    const {state, setState} = props\n\n    const [arrow, setArrow] = useState({\n        revealInfo: false\n    })\n\n    const UpAndDown = () => {\n        if(arrow.revealInfo) return 'block'\n        else return 'none'\n    }\n\n    const closeInfoBar = () => {\n        if(state.closeInfoBar) return 'block'\n        else return 'none'\n    }\n\n    const changeInfoArrowState = () =>{\n            setArrow({\n            revealInfo: !arrow.revealInfo\n        })\n    }\n\n    const changeInfoBarState = () =>{\n        setState({\n            free: state.free,\n            $: state.$,\n            $$: state.$$,\n            $$$: state.$$$,\n            status: state.status,\n            Greenmarket: state.Greenmarket,\n            Grocery: state.Grocery,\n            GrabAndGo: state.GrabAndGo,\n            FoodPantry: state.FoodPantry,\n            SoupKitchen: state.SoupKitchen,\n            closeInfoBar: false\n        })\n    }\n\n  return (\n    <div className = \"info-window\" style = {{display : closeInfoBar()}}>\n        <div className = 'info-window-container' style = {{display : UpAndDown()}}>\n            <p>\n                Welcome!\n                <br></br>\n                <br></br>\n                Use this map to find locations that offer free food (food pantries and Grab & Go meals at NYC schools), as well as grocery stores and farmers' markets.\n                <br></br>\n                <br></br>\n                Grab & Go Meals (NYC Schools)\n                <br></br>\n                Pantry/Mobile Food Pantry\n                <br></br>\n                Soup Kitchen/Mobile Soup Kitchen\n                <br></br>\n                Greenmarket/Farm stand/Fresh Food box\n                <br></br>\n                Grocery Store\n                <br></br>\n                <br></br>\n                Grab & Go sites are updated daily and Food Pantry and Soup Kitchen Sites are updated weekly.\n                <br></br>\n                <br></br>\n                Hours and locations on this map are subject to change. It is possible additional food locations are open but not featured on this map.\n            </p>\n        </div>\n        <div className = \"info-navbar-container\" onClick = {changeInfoArrowState}>\n            <div className=\"info-navbar\">\n                <h4>Find Food NYC Information</h4>\n                <div>\n                    {arrow.revealInfo ? <FaAngleDoubleDown/> : <FaAngleDoubleUp/>}\n                </div>\n\n                <div className = \"info-window-close-bttn\" onClick = {changeInfoBarState}>\n                    <FaWindowClose opacity = \"0.5\"/>\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}","import React, {useState, useEffect,  useCallback, useRef} from 'react'\nimport ReactMapGL from 'react-map-gl'\nimport Geocoder from 'react-map-gl-geocoder'\nimport { useForm } from \"react-hook-form\";\nimport foodData from \"./food-map-data.json\"\nimport parkingData from \"./meter.json\"\nimport CheckboxMenu from './Checkbox'\nimport NavBar from './NavBar'\nimport PopCard from './PopCard'\nimport ParkingPopCard from './ParkingPopCard'\nimport MapControls from './MapControls'\nimport MarkerCard from './MarkerCard'\nimport ParkingMarkerCard from './ParkingMarkerCard'\nimport InfoWindow from './InfoWindow'\n\nimport './App.css';\nimport 'react-dropdown/style.css';\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nconst App = () => {\n\n  //Setting up viewport and geocoder\n  const [viewport, setViewport] = useState({\n    // latitude: 40.7128,\n    // longitude: -74.0060152,\n    latitude: 42.343639,\n    longitude: -71.094861,\n    zoom: 14,\n  });\n\n  const mapRef = useRef();\n\n  const handleViewportChange = useCallback(\n    (newViewport) => setViewport(newViewport),\n    []\n  );\n  \n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      const geocoderDefaultOverrides = { transitionDuration: 1000 };\n      return handleViewportChange({\n        ...newViewport,\n        ...geocoderDefaultOverrides\n      });\n    },\n    []\n  );\n\n  const params = {\n    country: \"us\"\n  }\n\n  //Menu Components\n  const [state, setState] = useState({\n    free: true,\n    $: true,\n    $$: true,\n    $$$: true,\n    status: false,\n    Greenmarket: true,\n    Grocery: true,\n    GrabAndGo: true,\n    FoodPantry: true,\n    SoupKitchen: true,\n    closeInfoBar: false\n  })\n\n  const { register, handleSubmit } = useForm({\n    defaultValues: {\n      free: true,\n      $: true,\n      $$: true,\n      $$$: true,\n      status: false,\n      Greenmarket: true,\n      Grocery: true,\n      GrabAndGo: true,\n      FoodPantry: true,\n      SoupKitchen: true\n    }\n  });\n\n  const onSubmit = data => {\n    setState({\n      free: data.free,\n      $: data.$,\n      $$: data.$$,\n      $$$: data.$$$,\n      status: data.status,\n      Greenmarket: data.Greenmarket,\n      Grocery: data.Grocery,\n      GrabAndGo: data.GrabAndGo,\n      FoodPantry: data.FoodPantry,\n      SoupKitchen: data.SoupKitchen\n    })\n  };\n\n  //Markers\n  const [selectedFood, setSelectedFood] = useState(null)\n  const [selectedSpot, setSelectedSpot] = useState(null)\n  \n  useEffect(() => {\n      const listner = (e) => {\n        if(e.key === \"Escape\") setSelectedFood(null)\n      }\n\n      window.addEventListener(\"keydown\", listner)\n\n      return () => {\n        window.removeEventListener('keydown', listner)\n      }\n  }, [])\n\n  const getCord = (str) =>{\n    return JSON.parse(str)\n  }\n\n  return (\n    <div className = 'app' style={{ height: \"100vh\" }}>\n      <NavBar state = {state} setState = {setState}/>\n\n      <ReactMapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        onViewportChange={handleViewportChange}\n        mapStyle = \"mapbox://styles/mapbox/streets-v12\"\n        mapboxApiAccessToken=\"pk.eyJ1Ijoic2hraW1taWUiLCJhIjoiY2x3NzljaXFkMWNlZjJqcGZ6dTcwbTI4biJ9.mrf2iqSuC7WR32PqdQh1eA\"\n      >\n\n        {foodData.map((food, index) => (\n          <MarkerCard \n            key = {index}\n            food = {food}\n            setSelectedFood = {setSelectedFood}\n            getCord = {getCord}\n            state = {state}\n          />\n        ))}\n\n        {parkingData.map((spot, index) => (\n          <ParkingMarkerCard \n            key = {index}\n            spot = {spot}\n            setSelectedSpot = {setSelectedSpot}\n            state = {state}\n          />\n        ))}\n\n        {selectedSpot ? (\n          <ParkingPopCard \n            setSelectedSpot ={setSelectedSpot} \n            selectedSpot = {selectedSpot}\n          />\n        ) : null}\n\n\n        {selectedFood ? (\n          <PopCard \n            getCord = {getCord} \n            setSelectedFood ={setSelectedFood} \n            selectedFood = {selectedFood}\n          />\n        ) : null}\n\n        <div className = 'left-side'>\n          <MapControls setViewport = {setViewport} \n            handleViewportChange = {handleViewportChange}\n            mapRef = {mapRef}\n          />\n\n           <CheckboxMenu\n          setState = {setState}\n          register = {register} \n          handleSubmit = {handleSubmit} \n          onSubmit = {onSubmit}/>\n        </div>\n\n        <InfoWindow state = {state} setState = {setState}/>\n\n          <Geocoder\n            mapRef={mapRef}\n            onViewportChange={handleGeocoderViewportChange}\n            mapboxApiAccessToken=\"pk.eyJ1Ijoic2hraW1taWUiLCJhIjoiY2x3NzljaXFkMWNlZjJqcGZ6dTcwbTI4biJ9.mrf2iqSuC7WR32PqdQh1eA\"\n            position= \"top-right\"\n            hideOnSelect={true}\n            queryParams={params}\n          />\n\n\n      </ReactMapGL>\n    </div>\n  );\n};\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}